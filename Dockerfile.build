ARG BASE_IMAGE_VER="22.04"
ARG CMAKE_VERSION="3.31.6"
ARG QT_VERSION="6.9.1"
ARG QT_INSTALLER_VERSION="4.9"
ARG PROJECT_BUILD_TYPE="Debug"
ARG APP_VERSION_MAJOR="0"
ARG APP_VERSION_MINOR="0"
ARG APP_VERSION_PATCH="0"

# Set base container image
FROM ubuntu:${BASE_IMAGE_VER} AS prepare-os-stage
# Step 1: set working directory
WORKDIR /opt/calculator
# Step 2: install dependencies
RUN echo "Step 1: Install dependencies"
RUN echo 'Acquire::ForceIPv4 "true";' > /etc/apt/apt.conf.d/99force-ipv4 && \
    apt-get update && \
    apt-get install -y \
    build-essential \
    mesa-common-dev \
    libglu1-mesa-dev \
    libglu1-mesa \
    libxkbcommon-x11-0 \
    libxcb-icccm4 \
    libxcb-image0 \
    libxcb-keysyms1 \
    libxcb-randr0 \
    libxcb-sync1 \
    libxcb-xfixes0 \
    libxcb-shape0 \
    libx11-xcb1 \
    libdbus-1-3 \
    libxcb-render-util0 \
    libxcb-xinerama0 \
    libxcb-util1 \
    libxcb-cursor0 \
    libxcb-glx0 \
    libegl1 \
    libegl-dev \
    libglib2.0-0 \
    libglib2.0-dev \
    wget

FROM prepare-os-stage AS install-cmake-stage
# Redefined build args to make them visible at this stage
ARG CMAKE_VERSION
# Step 1: set working directory
WORKDIR /opt/calculator
# Step 2: install CMake
# Run it in separate layer to avoid rebuild of entire layer just because of cmake
RUN echo "Step 2: Download and install CMake ${CMAKE_VERSION}"
RUN wget https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.sh -O cmake-linux.sh && \
    chmod +x cmake-linux.sh && \
    mkdir -p ./cmake_install && \
    ./cmake-linux.sh --skip-license --prefix=./cmake_install/

FROM install-cmake-stage AS install-linuxdeploy-stage
# Step 1: set working directory
WORKDIR /opt/calculator
# Step 2: install Linuxdeploy
RUN echo "Step 3: Download linuxdeploy"
RUN wget https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage -O linuxdeployqt.AppImage && \
    chmod +x linuxdeployqt.AppImage

FROM install-linuxdeploy-stage AS install-qt-stage
# Redefined build args to make them visible at this stage
ARG QT_VERSION
ARG QT_USERNAME
ARG QT_PASSWORD
ARG QT_INSTALLER_VERSION
# Step 1: set working directory
WORKDIR /opt/calculator
# Step 2: download and install Qt
RUN echo "Step 4: Download and install Qt ${QT_VERSION}"
RUN wget https://www.nic.funet.fi/pub/mirrors/download.qt-project.org/archive/online_installers/${QT_INSTALLER_VERSION}/qt-online-installer-linux-x64-${QT_INSTALLER_VERSION}.0.run -O qt-linux.run && \
    chmod +x qt-linux.run && \
    ./qt-linux.run \
        --accept-licenses \
        --accept-obligations \
        --confirm-command \
        --default-answer \
        --email ${QT_USERNAME} \
        --password ${QT_PASSWORD} \
        --verbose \
        install qt${QT_VERSION}-essentials

FROM install-qt-stage AS build-calculator-stage
ARG PROJECT_BUILD_TYPE
ARG QT_VERSION
ARG APP_VERSION_MAJOR
ARG APP_VERSION_MINOR
ARG APP_VERSION_PATCH
ENV APP_VERSION_MAJOR=${APP_VERSION_MAJOR}
ENV APP_VERSION_MINOR=${APP_VERSION_MINOR}
ENV APP_VERSION_PATCH=${APP_VERSION_PATCH}
# Step 1: set working directory
WORKDIR /opt/calculator
COPY . /opt/calculator
# Step 2: set environment variables for Qt
ENV PATH="/opt/calculator/cmake_install/bin:${PATH}"
ENV Qt6_DIR="/opt/Qt/${QT_VERSION}/gcc_64/lib/cmake/Qt6"
# Step 3: generate Makefiles
RUN echo "Step 5: CMake configure" && \
    cmake -S . -B ./build/${PROJECT_BUILD_TYPE} -DCMAKE_BUILD_TYPE="${PROJECT_BUILD_TYPE}"
# Step 4: build the project
RUN echo "Step 6: CMake build" && \
    cmake --build ./build/${PROJECT_BUILD_TYPE} --config "${PROJECT_BUILD_TYPE}"

FROM build-calculator-stage AS prepare-artifacts-stage
ARG PROJECT_BUILD_TYPE
ARG QT_VERSION
ENV PATH="/opt/Qt/${QT_VERSION}/gcc_64/bin:${PATH}"
# Step 1: set working directory
WORKDIR /opt/calculator
# Step 2: make linuxdeploy executable and prepare artifacts directory
RUN echo "Step 7: Prepare artifacts directory" && \
    mkdir -p calculator/usr/bin/ && \
    cp ./build/${PROJECT_BUILD_TYPE}/bin/calculator calculator/usr/bin/ && \
    cp ./calculator.desktop calculator/ && \
    cp ./imgs/icon.svg calculator/calculator.svg
RUN echo "Step 8: Prepare linuxdeploy" && \
    ./linuxdeployqt.AppImage --appimage-extract
RUN echo "Step 9: Create deployment" && \
    ./squashfs-root/AppRun calculator/calculator.desktop \
        -bundle-non-qt-libs

FROM scratch AS build-app-output-stage
COPY --from=prepare-artifacts-stage /opt/calculator/calculator/ /artifacts/
# Add fake entrypoint to satisfy docker compose, it's a common practice
ENTRYPOINT ["./artifacts/AppRun"]
