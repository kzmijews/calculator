/**
 * Copyright © 2025 Karol Zmijewski

 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the “Software”), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
 * to whom the Software is furnished to do so, subject to the following conditions:
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,

 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef CALCULATOR_UI_H
#define CALCULATOR_UI_H

#include <memory>
#include "calculator.hpp"
// generated by Qt User Interface Compiler version 6.9.1
#include "calculator_gen_ui.hpp"

namespace kz::calc::ui {
    class CalculatorUi: protected Ui::CalculatorMainWindow {
    private:
        kz::calc::core::Calculator &calculator;
        std::unique_ptr<QMainWindow> mainWindow;
        void connectButtons();
        /**
         * Handles keyboard button clicks in the calculator UI.
         * This function processes the text of the button clicked and updates the result browser accordingly.
         * It supports operations like addition, subtraction, multiplication, division, and special functions
         * like square root and factorial. It also handles clearing the input, evaluating the expression, and
         * managing errors.
         * @param resultBrowser The QTextBrowser where the result is displayed.
         * @param text The text of the button clicked, which determines the action to perform.
         *              It can be a number, an operator, or a special command like "AC" or "=".
         *              Supported operators include "+", "-", "*", "/", "^", "sqrt", "pi", and
         *              "sep" (for decimal point). Special commands include "AC" (clear all),
         *              "=" (evaluate expression), "x" (multiplication), "<<" (remove last character),
         *              and "pi" (insert the value of pi).
         * @throws kz::calc::core::InvalidExpression If the expression is invalid or unsupported.
         * @throws std::runtime_error If an unexpected error occurs during evaluation.
         * @note The function resets the calculator state after evaluating an expression or encountering
         * an error.
         * @note The function also handles special cases like removing the last character from the input
         * and inserting the value of pi.
         * @note The function prevents starting an expression with an operator to ensure valid input.
         * @note The function uses the calculator's expression evaluation method to compute the result
         * and updates the result browser accordingly.
         */
        void keyboardButtonClicked(QTextBrowser* resultBrowser, const QString& text);
    public:
        /**
         * Constructor for the CalculatorUi class.
         * Initializes the main window and sets up the calculator reference.
         * @param calculator Reference to the Calculator instance used for expression evaluation.
         */
        CalculatorUi(kz::calc::core::Calculator &calculator);
        /**
         * Destructor for the CalculatorUi class.
         */
        ~CalculatorUi() = default;
        /**
         * Sets up the user interface for the calculator.
         * This function initializes the main window and sets up the UI components such as buttons,
         * result browser, and layout. It also connects the buttons to their respective actions.
         */
        void setup();
        /**
         * Returns the main window of the calculator UI.
         * @return Pointer to the QMainWindow instance representing the main window.
         */
        QMainWindow* getMainWindow() const;
    };
} // namespace kz::calc::ui

#endif /* !CALCULATOR_UI_H! */
